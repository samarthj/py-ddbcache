[project]
authors = [{name = "Sam", email = "dev@samarthj.com"}]
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
]
dependencies = [
    "boto3; python_version>='3.9'",
    "pylib-helpers; python_version>='3.9'",
]
description = "A simple interface for caching items in DynamoDB"
license = {text = "GPL-3.0-or-later"}
name = "ddb-cache"
readme = "README.md"
requires-python = ">=3.9"
version = "0.4.75"

[project.urls]
"Bug Tracker" = "https://github.com/samarthj/py-ddbcache/issues"
Documentation = "https://github.com/samarthj/py-ddbcache/blob/main/README.md"
Repository    = "https://github.com/samarthj/py-ddbcache"


[project.optional-dependencies]
[tool.pdm]
allow_prereleases = true

[tool.pdm.dev-dependencies]
lint = [
    "autopep8; python_version>='3.9'",
    "bandit; python_version>='3.9'",
    "black; python_version>='3.9'",
    "flake8; python_version>='3.9'",
    "flake8-bandit; python_version>='3.9'",
    "flake8-black; python_version>='3.9'",
    "flake8-comprehensions; python_version>='3.9'",
    "flake8-expression-complexity; python_version>='3.9'",
    "flake8-functions; python_version>='3.9'",
    "flake8-isort; python_version>='3.9'",
    "flake8-pytest; python_version>='3.9'",
    "flake8-pytest-style; python_version>='3.9'",
    "flake8-simplify; python_version>='3.9'",
    "flake8-use-fstring; python_version>='3.9'",
    "isort; python_version>='3.9'",
    "mccabe; python_version>='3.9'",
    "mypy; python_version>='3.9'",
    "pep8-naming; python_version>='3.9'",
    "pyproject-flake8; python_version>='3.9'",
    "pylint; python_version>='3.9'",
    "rope; python_version>='3.9'",
]
other = ["colorama; python_version>='3.9'"]
test = [
    "pytest>=6.0; python_version>='3.9'",
    "pytest-cov; python_version>='3.9'",
    "moto; python_version>='3.9'",
]

[build-system]
build-backend = "pdm.pep517.api"
requires      = ["pdm-pep517"]

[tool.pdm.scripts]
format         = {cmd = "black --config pyproject.toml --color .", help = "Format code using black config"}
format-imports = {cmd = "isort --settings-file pyproject.toml --color .", help = "Optimize and sort imports"}
lint           = {cmd = "pflake8", help = "Print lint errors"}
lint-plugins   = {cmd = "pflake8 --version", help = "Print plugins used for linting"}
style          = {cmd = "black --config pyproject.toml --color --diff .", help = "Check code style"}
style-imports  = {cmd = "isort --settings-file pyproject.toml --color --diff .", help = "Check code style for imports"}
test           = {cmd = "pytest --cov=src --cov-report=xml", help = "Run the tests"}
test-local     = {cmd = "pytest -r A", help = "Run the tests with cred access"}

[tool.black]
line_length = 120

[tool.isort]
ensure_newline_before_comments = true
extend_skip                    = [".vscode", "__pypackages__"]
force_grid_wrap                = 0
force_sort_within_sections     = true
group_by_package               = true
import_heading_stdlib          = "StdLib"
include_trailing_comma         = true
lexicographical                = true
line_length                    = 120
multi_line_output              = 3
profile                        = "black"
remove_redundant_aliases       = true
src_paths                      = ["facedb", "tests"]
use_parentheses                = true

[tool.flake8]
black-config              = 'pyproject.toml'
extend-exclude            = ["__pypackages__"]
extend-ignore             = "E203,E501,W503,C0330,C0326,S101,S603,E722"
indent-size               = 4
max-complexity            = 10
max-expression-complexity = 10
max-line-length           = 120
max-returns-amount        = 5
show-source               = "true"

[tool.pytest.ini_options]
addopts   = "-ra"
testpaths = ["tests"]

[tool.pycln]
all          = true
exclude      = '(__pypackages__|__pycache__|\.pytest_cache|\.github|\.git)'
expand_stars = true
include      = '(src|tests)/.*\.py$'
no_gitignore = false
path         = "src"
verbose      = true

[tool.semantic_release]
branch           = "main"
build_command    = "pip install pdm && pdm build"
commit_author  = "dev@samarthj.com"
commit_parser  = "semantic_release.history.emoji_parser"
commit_subject = "{version} via python-semantic-release"
patch_emoji    = ":ambulance:, :lock:, :bug:, :zap:, :goal_net:, :alien:, :wheelchair:, :speech_balloon:, :mag:, :apple:, :penguin:, :checkered_flag:, :robot:, :green_apple:, :bookmark:, :construction_worker:"
remove_dist      = true
upload_to_pypi   = false
version_variable = ['pyproject.toml:version']
