[project]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Database",
    "Topic :: Database :: Front-Ends",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
dependencies = ["boto3; python_version>='3.9'", "pylib-helpers; python_version>='3.9'"]
description = "A simple interface for caching items in DynamoDB"
name = "ddb-cache"
readme = "README.md"
requires-python = ">=3.9"
version = "0.6.0"

[[project.authors]]
email = "dev@samarthj.com"
name  = "Sam"

[project.license]
text = "LGPL-3.0-or-later"

[project.urls]
"Bug Tracker" = "https://github.com/samarthj/py-ddbcache/issues"
Changelog     = "https://github.com/samarthj/py-ddbcache/blob/main/CHANGELOG.md"
Documentation = "https://github.com/samarthj/py-ddbcache/blob/main/README.md"
Repository    = "https://github.com/samarthj/py-ddbcache"

[project.optional-dependencies]
[tool.pdm]
allow_prereleases = true

[tool.pdm.dev-dependencies]
code-style = [
    "flake8-comprehensions",
    "flake8-expression-complexity",
    "flake8-functions",
    "flake8-simplify",
    "flake8-use-fstring",
    "mccabe",
    "pep8-naming",
]
formatting = ["black", "isort", "flake8-black", "flake8-isort", "pycln"]
lint = ["autopep8", "flake8", "mypy", "pyproject-flake8>=0.0.1a2", "pylint"]
other = ["colorama; python_version>='3.9'", "rope"]
security = ["bandit", "flake8-bandit"]
test = ["pytest>=6.0", "pytest-cov", "flake8-pytest", "flake8-pytest-style", "moto; python_version>='3.9'"]

[build-system]
build-backend = "pdm.pep517.api"
requires      = ["pdm-pep517>=1.0"]

[tool.pdm.scripts]
format         = {cmd = "black --config pyproject.toml --color .", help = "Format code using black config"}
format-imports = {cmd = "isort --settings-file pyproject.toml --color .", help = "Optimize and sort imports"}
format-pycln   = {cmd = "pycln --config pyproject.toml .", help = "Remove unused imports"}
lint           = {cmd = "pflake8", help = "Print lint errors"}
lint-plugins   = {cmd = "pflake8 --version", help = "Print plugins used for linting"}
style          = {cmd = "black --config pyproject.toml --color --diff .", help = "Check code style"}
style-imports  = {cmd = "isort --settings-file pyproject.toml --color --diff .", help = "Check code style for imports"}
style-pycln    = {cmd = "pycln --diff --config pyproject.toml .", help = "Check code style"}
test           = {cmd = "pytest --cov=src --cov-report=xml", help = "Run the tests"}
test-local     = {cmd = "pytest tests -r A", help = "Run the tests with cred access"}

clean = """
rm -rf .mypy_cache
       .pytest_cache
       .venv
       poetry.lock
       dist
       build
       ./**/__pycache__
       __pypackages__
"""

[tool.black]
line_length = 120

[tool.isort]
ensure_newline_before_comments = true
extend_skip                    = [".vscode", ".venv", "__pypackages__"]
force_grid_wrap                = 0
force_sort_within_sections     = true
group_by_package               = true
import_heading_stdlib          = "StdLib"
include_trailing_comma         = true
lexicographical                = true
line_length                    = 120
multi_line_output              = 3
profile                        = "black"
remove_redundant_aliases       = true
src_paths                      = ["src", "tests"]
use_parentheses                = true

[tool.flake8]
black-config              = 'pyproject.toml'
extend-exclude            = [".vscode", ".venv", "__pypackages__"]
extend-ignore             = "E203,E501,W503,C0330,C0326,S101,S603,E722"
indent-size               = 4
max-complexity            = 10
max-expression-complexity = 10
max-line-length           = 120
max-returns-amount        = 5
show-source               = "true"

[tool.pyright]
exclude    = ["**/__pypackages__"]
extraPaths = ["__pypackages__/3.10/lib", "__pypackages__/3.9/lib"]

[tool.pytest.ini_options]
# addopts    = "-ra"
pythonpath = [".", "src"]
testpaths  = ["tests"]

[tool.pycln]
all          = true
exclude      = '(__pypackages__|__pycache__|\.pytest_cache|\.github|\.git|\.venv|\.mypy_cache|\.vscode)'
expand_stars = true
include      = '.*\.py$'
no_gitignore = false
paths        = ["src", "tests"]
verbose      = true

# [tool.semantic_release]
# branch                = "main"
# build_command         = "pdm build -v"
# changelog_capitalize  = false
# changelog_components  = "semantic_release.changelog.changelog_headers,semantic_release.changelog.compare_url"
# changelog_file        = "CHANGELOG.md"
# changelog_sections    = "feature,fix,breaking,documentation,performance,revert,test,build"
# commit_author         = "Github Action <action@github.com>"
# commit_parser         = "semantic_release.history.angular_parser"
# commit_subject        = "ci(github-actions): v{version} via python_semantic_release"
# ignore_token_for_push = true
# major_on_zero         = false
# # pre_commit_command    = "git status && gpg -K && git commit -S -v -a --no-edit --amend"
# remove_dist       = false
# tag_commit        = false # otherwise creates tag before the release commit
# upload_to_pypi    = false
# upload_to_release = true
# version_source    = "tag"
# # version_pattern  = '{version}'
# version_variable = ['pyproject.toml:version']
