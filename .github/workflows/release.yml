name: Daily Release

on:
  schedule:
    - cron: '0 1 * * */2'
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true

jobs:
  release:
    environment: pdm_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10.x']
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Load pip cache
        id: pip-cache
        uses: actions/cache@main
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-pdm-
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-pdm-
            ${{ runner.os }}-${{ matrix.python-version }}-pip-
      - name: Install system dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pdm
      - name: Get pdm cache dir
        id: pdm-cache-dir
        run: |
          echo "::set-output name=dir::$(pdm config cache_dir)"
      - name: Load pdm cache
        id: pdm-cache
        uses: actions/cache@main
        with:
          path: |
            ${{ steps.pdm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pdm-${{ github.repository }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('pdm.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pdm-${{ github.repository }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('pdm.lock') }}
            ${{ runner.os }}-${{ matrix.python-version }}-pdm-${{ github.repository }}-${{ hashFiles('pyproject.toml') }}
            ${{ runner.os }}-${{ matrix.python-version }}-pdm-${{ github.repository }}

      - name: Update the project
        id: update
        run: |
          echo "::group::Configure pdm"
          echo "=============================="
          pdm config install.parallel true
          pdm config install.cache on
          pdm config
          pdm info
          pdm cache info
          echo "::endgroup::"

          echo "::group::Run pdm update"
          echo "=============================="
          pdm sync -dG:all --no-self --clean
          pdm update --no-self
          pdm cache info
          echo "::endgroup::"

          echo "::group::Run pycln"
          echo "=============================="
          pdm run style-pycln
          pdm run format-pycln
          echo "::endgroup::"

          echo "::group::Run isort"
          echo "=============================="
          pdm run style-imports
          pdm run format-imports
          echo "::endgroup::"

          echo "::group::Run black"
          echo "=============================="
          pdm run style
          pdm run format
          echo "::endgroup::"

          echo "::group::Run pytest"
          echo "=============================="
          pdm run test
          echo "::endgroup::"

      - name: Run linting
        id: lint
        continue-on-error: true
        run: |
          pdm run lint-plugins
          # exit-zero treats all errors as warnings.
          pdm run lint --count --exit-zero --statistics || true

      - uses: codecov/codecov-action@master
        with:
          # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./coverage.xml # optional
          flags: unittests # optional
          verbose: true # optional (default = false)

      - name: Import GPG key
        if: ${{ steps.update.outcome == 'success' }}
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.PGP_PRIVATE_KEY }}
          git-user-signingkey: true

      - name: Setup git config
        if: ${{ steps.update.outcome == 'success' }}
        id: git
        run: |
          echo "::group::Setup git config"
          echo "=============================="
          git config user.name "Sam"
          git config user.email dev@samarthj.com
          git config user.signkey dev@samarthj.com
          # git config commit.gpgsign true
          git config init.defaultBranch main
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          echo "::endgroup::"

          echo "::group::Commit changes"
          git add .
          git status
          git commit -S -m "ci(github-actions): :construction_worker: update, format, lint, test" || true
          echo "::endgroup::"

      - name: Github Release
        id: github_release
        if: ${{ steps.git.outcome == 'success' }}
        uses: relekang/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with pdm
        id: build
        if: ${{ steps.github_release.outcome == 'success' }}
        continue-on-error: true
        run: pdm build -v --no-clean

      - name: Publish distribution ðŸ“¦ to Test PyPI
        id: test_pypi
        if: ${{ steps.build.outcome == 'success' }}
        continue-on-error: true
        run: |
          pdm publish --no-build -r testpypi -u ${{ secrets.TEST_PYPI_USER }} -P ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Publish distribution ðŸ“¦ to PyPI
        id: pypi
        if: ${{ steps.test_pypi.outcome == 'success' }}
        continue-on-error: true
        run: |
          pdm publish --no-build -u ${{ secrets.PYPI_API_USER }} -P ${{ secrets.PYPI_API_TOKEN }}
