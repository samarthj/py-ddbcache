name: Daily Release

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true

jobs:
  release:
    environment: pdm_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.x'
          architecture: 'x64'
      - name: Setup PDM
        uses: pdm-project/setup-pdm@main
        with:
          python-version: 3.9 # Version range or exact version of a Python version to use, the same as actions/setup-python
          architecture: x64 # The target architecture (x86, x64) of the Python interpreter. the same as actions/setup-python
          # version: 1.4.0       # The version of PDM to install. Leave it as empty to use the latest version from PyPI
          prerelease: true # Allow prerelease versions to be installed
          enable-pep582: true # Enable PEP 582 package loading globally
      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Load pip cache
        id: pip-cache
        uses: actions/cache@main
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-pip-pdm-pycln
          restore-keys: |
            ${{ runner.os }}-pip-pdm-pycln
      - name: Install system dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pdm pycln pdm-publish commitizen
      - name: Get pdm cache dir
        id: pdm-cache-dir
        run: |
          echo "::set-output name=dir::$(pdm config cache_dir)"
      - name: Load pdm cache
        id: pdm-cache
        uses: actions/cache@main
        with:
          path: |
            ${{ steps.pdm-cache-dir.outputs.dir }}
            ./.venv
          key: ${{ runner.os }}-pdm-${{ hashFiles('pdm.lock') }}
          restore-keys: |
            ${{ runner.os }}-pdm-

      - name: Update the project
        id: update
        continue-on-error: true
        run: |
          pdm config parallel_install true
          pdm update --save-compatible --update-eager
          pdm install -v -dG:all --no-self --no-editable
          pdm config
          pdm info
          echo $PATH
          echo "=============================="
          echo "Run format/test/lint"
          echo "++++++++++++++++++++++++++++++"
          pdm run format-imports
          pdm run format
          pdm run test
          # Show the plugins used for linting
          pdm run lint-plugins
          # exit-zero treats all errors as warnings.
          pdm run lint --count --exit-zero --statistics || true
          # pycln --config="pyproject.toml" . --diff
          # pycln --config="pyproject.toml" .

      - uses: codecov/codecov-action@master
        with:
          # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./coverage.xml # optional
          flags: unittests # optional
          verbose: true # optional (default = false)

      - name: Import GPG key
        if: ${{ steps.update.outcome == 'success' }}
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.PGP_PRIVATE_KEY }}
          git-user-signingkey: true
          # git-commit-gpgsign: true

      - name: Setup git config
        if: ${{ steps.update.outcome == 'success' }}
        id: git
        run: |
          echo "::set-output name=diff::$(git diff FETCH_HEAD --stat)"
          echo "=============================="
          echo "Setup git config"
          echo "++++++++++++++++++++++++++++++"
          git config user.name "Sam"
          git config user.email dev@samarthj.com
          git config user.signkey dev@samarthj.com
          # git config commit.gpgsign true
          git config init.defaultBranch main
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          pdm run cz changelog
          git add .
          git status
          git commit -S -m "ci(github-actions): :construction_worker: format, lint, test" || true

          # pdm build

      - name: Python Semantic Release
        if: ${{ steps.git.outcome == 'success' }}
        uses: relekang/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # pypi_token: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish distribution ðŸ“¦ to Test PyPI
        id: test_pypi
        if: ${{ steps.github_release.outcome == 'success' }}
        run: |
          pdm publish -r testpypi --password ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Publish distribution ðŸ“¦ to PyPI
        id: pypi
        if: ${{ steps.test_pypi.outcome == 'success' }}
        run: |
          pdm publish --password ${{ secrets.PYPI_API_TOKEN }}
